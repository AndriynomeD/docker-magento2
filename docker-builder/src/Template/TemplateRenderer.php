<?php

declare(strict_types=1);

namespace DockerBuilder\Core\Template;

use Exception;

/**
 * Template Renderer
 */
class TemplateRenderer implements TemplateRendererInterface
{
    /**
     * Render file contents based on variables
     * @param string $templatePath
     * @param array $variables
     * @return string
     */
    public function render(string $templatePath, array $variables): string
    {
        if ($variables['_enable_variables'] ?? false) {
            $content = $this->renderTemplate($templatePath, $variables);
        } else {
            $content = file_get_contents($templatePath);
            if ($content === false) {
                throw new Exception(sprintf("Failed to read template file %s", $templatePath));
            }
        }

        $content = str_replace('{{generated_by_builder}}',
            'This file is automatically generated. Do not edit directly.', $content);

        return $content;
    }

    /**
     * Render the given template file using the provided variables and return the resulting output.
     *
     * @param string $templateFile
     * @param array $variables
     * @return string
     */
    protected function renderTemplate(string $templateFile, array $variables): string
    {
        extract($variables, EXTR_OVERWRITE);
        ob_start();
        include $templateFile;
        $output = ob_get_clean();
        return $output ?: "";
    }

    /**
     * Return the first found template file name for the given file.
     *
     * @param string $filename
     * @param array $config
     * @return string|null
     */
    public function findTemplate(string $filename, array $config): ?string
    {
        foreach (['templateDirPath', 'version', 'flavour', 'template_infix', 'template_name'] as $key) {
            $config[$key] = $config[$key] ?? '';
        }

        $templateDirPath = $config['templateDirPath'];
        $potentialFilenames = $this->getPotentialFilenames($filename, $config);;
        foreach ($potentialFilenames as $potentialFilename) {
            $path = $templateDirPath . $potentialFilename;
            if (file_exists($path)) {
                if (!is_readable($path)) {
                    throw new Exception(sprintf('Template file %s not readable.', $path));
                }
                return $path;
            }
        }

        return null;
    }

    /**
     * Example for 'Dockerfile' + ['template_name' => 'Dockerfile.tml']:
     *    [
     *       'Dockerfile.tml' - will be found
     *    ]
     * Example for 'Dockerfile' + ['version' => '7.4', 'flavour' => 'cli']:
     *   [
     *      'Dockerfile-7.4-cli'
     *      'Dockerfile-7.4'
     *      'Dockerfile-cli' - will be found
     *      'Dockerfile'
     *   ]
     * Example for 'Dockerfile' + ['version' => '7.4', 'flavour' => 'cli', 'template_infix' => 'mcs']:
     *    [
     *      'Dockerfile-7.4-mcs-cli'
     *      'Dockerfile-7.4-mcs'
     *      'Dockerfile-mcs-cli' - will be found
     *      'Dockerfile-mcs'
     *      'Dockerfile-7.4-cli'
     *      'Dockerfile-7.4'
     *      'Dockerfile-cli'
     *      'Dockerfile'
     *    ]
     *
     * @param string $filename
     * @param array $config
     * @return array
     */
    private function getPotentialFilenames(string $filename, array $config): array
    {
        if (!!$config['template_name']) {
            return [$config['template_name']];
        }

        $potentialFilenames = [
            sprintf("%s-%s-%s", $filename, $config['version'], $config['flavour']),
            sprintf("%s-%s", $filename, $config['version']),
            sprintf("%s-%s", $filename, $config['flavour']),
            $filename,
        ];

        if (!$config['template_infix']) {
            return $potentialFilenames;
        }

        return [
            sprintf("%s-%s-%s-%s", $filename, $config['version'], $config['template_infix'], $config['flavour']),
            sprintf("%s-%s-%s", $filename, $config['version'], $config['template_infix']),
            sprintf("%s-%s-%s", $filename, $config['template_infix'], $config['flavour']),
            sprintf("%s-%s", $filename, $config['template_infix']),
            ...$potentialFilenames
        ];
    }
}
