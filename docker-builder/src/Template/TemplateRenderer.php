<?php

declare(strict_types=1);

namespace DockerBuilder\Core\Template;

use Exception;
use RecursiveDirectoryIterator;
use RecursiveIteratorIterator;
use Twig\Environment;
use Twig\Loader\FilesystemLoader;
use Twig\TwigFunction;

/**
 * Template Renderer
 */
class TemplateRenderer implements TemplateRendererInterface
{
    private ?Environment $twig;
    private string $templatesPath;

    /**
     * @inheirtDoc
     */
    public function setTemplatesPath(string $templatesPath): void
    {
        $this->templatesPath = $templatesPath . DIRECTORY_SEPARATOR;
        $this->setTemplatesPathTwig($templatesPath);
    }

    /**
     * @inheirtDoc
     */
    public function render(string $templateFilePath, array $fileConfig, array $variables): string
    {
        if ($fileConfig['_enable_variables'] ?? false) {
            $content = $this->renderTemplate($templateFilePath, $variables);
        } else {
            $content = $this->renderWithoutTemplate($templateFilePath);
        }

        return $content;
    }

    /**
     * @inheirtDoc
     */
    public function findTemplate(string $filename, array $config): ?string
    {
        $templateSubDir = $config['templateSubDir'];
        $needRender = $config['_enable_variables'] ?? false;
        $templateFilename = $config['template_name'] ?? ($filename . ($needRender ? '.twig' : ''));
        $templatePath = $templateSubDir . $templateFilename;
        $testPath = $this->templatesPath . $templatePath;
        if (file_exists($testPath)) {
            if (!is_readable($testPath)) {
                throw new Exception(sprintf('Template file %s not readable.', $testPath));
            }
            return $templatePath;
        }

        return null;
    }

    /**
     * @param string $directory
     * @param array $config
     * @return array
     * @throws Exception
     */
    public function findTemplates(string $directory, array $config): array
    {
        $testPath = $this->templatesPath . $config['templateSubDir'] . $directory;
        if (is_dir($testPath)) {
            if (!is_readable($testPath)) {
                throw new Exception(sprintf('Template file %s not readable.', $testPath));
            }

            return $this->getFiles($testPath);
        }

        return [];
    }

    /**
     * @param string $directoryPath
     * @return array
     */
    private function getFiles(string $directoryPath): array
    {
        if (!is_dir($directoryPath)) {
            throw new Exception(sprintf("Path %s does not a directory", $directoryPath));
        }

        $directoryPath = rtrim($directoryPath, '/');
        $parentPath = dirname($directoryPath);
        $iterator = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($directoryPath)
        );
        foreach ($iterator as $file) {
            if ($file->isFile() && !in_array($file->getFilename(), ['.', '..'])) {
                $relativePath = str_replace($parentPath . '/', '', $file->getPathname());
                $files[] = $relativePath;
            }
        }

        sort($files);
        return $files;
    }

    /**
     * @param string $templateFile
     * @param array $variables
     * @return string
     */
    private function renderTemplate(string $templateFile, array $variables): string
    {
        if ($this->twig === null) {
            throw new \RuntimeException('Templates path not set. Call setTemplatesPath() first.');
        }

        $variables['generated_by_builder'] = 'This file is automatically generated. Do not edit directly.';
        return $this->twig->render($templateFile, $variables);
    }

    /**
     * @param string $templateFilePath
     * @return string
     * @throws Exception
     */
    private function renderWithoutTemplate(string $templateFilePath): string
    {
        $output = file_get_contents($this->templatesPath . $templateFilePath);
        if ($output === false) {
            throw new Exception(sprintf("Failed to read template file %s", $templateFilePath));
        }
        $output = str_replace('{{generated_by_builder}}',
            'This file is automatically generated. Do not edit directly.', $output);
        return $output;
    }

    public function setTemplatesPathTwig(string $templatesPath): void
    {
        $loader = new FilesystemLoader($templatesPath);
        $this->twig = new Environment($loader, [
            'cache' => false,
            'debug' => true,
            'auto_reload' => true,
        ]);

        $this->addVersionCompareFunction();
    }

    /**
     * {% if version_compare(phpVersion, '7.4', '>=') %}
     *      PHP version is 7.4 or higher
     * {% endif %}
     * @return void
     */
    private function addVersionCompareFunction(): void
    {
        $function = new TwigFunction('version_compare', function ($version1, $version2, $operator = null) {
            if ($operator === null) {
                return version_compare($version1, $version2);
            }
            return version_compare($version1, $version2, $operator);
        });

        $this->twig->addFunction($function);
    }
}
