#
# {{generated_by_builder}}
#
#version: "3.9"
services:
{# ###########################################################################
   # Varnish
   ########################################################################### #}
{% if DOCKER_SERVICES.varnish %}
  varnish:
    hostname: varnish.{{ M2_PROJECT }}
    image: meanbee/magento2-varnish:latest
    environment:
      - VIRTUAL_HOST={{ M2_VIRTUAL_HOSTS }}
      - VIRTUAL_PORT=80
      - HTTPS_METHOD=noredirect
{# Multi-domains certificates
   Specify multiple hosts with a comma delimiter to create multi-domains (SAN) certificates
   (the first domain in the list will be the base domain). #}
      - CERT_NAME={{ M2_VIRTUAL_HOSTS|split(',')|first|trim }}
    ports:
      - 80
    depends_on:
      web:
        condition: service_started #service_healthy
    networks:
      default:
      nginx-proxy:

{% endif %}
{# ###########################################################################
   # Nginx
   ########################################################################### #}
  web:
    hostname: web.{{ M2_PROJECT }}
    build:
      context: containers/nginx/
    ports:
      - 80
    depends_on:
      fpm:
       condition: service_started #service_healthy
    volumes:
      - {{ M2_SOURCE_VOLUME }}:/var/www/magento
    env_file:
      - ./envs/global.env
{% if not DOCKER_SERVICES.varnish %}
    environment:
      - VIRTUAL_HOST={{ M2_VIRTUAL_HOSTS }}
      - VIRTUAL_PORT=80
      - HTTPS_METHOD=noredirect
      - CERT_NAME={{ M2_VIRTUAL_HOSTS|split(',')|first|trim }}
{% endif %}
    networks:
      default:
      nginx-proxy:

{# ###########################################################################
   # PHP-FPM
   ########################################################################### #}
  fpm:
    hostname: fpm.{{ M2_PROJECT }}
    build:
      context: containers/php/{{ PHP_VERSION }}-fpm/
    ports:
      - 9000
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - {{ M2_SOURCE_VOLUME }}:/var/www/magento
    env_file:
      - ./envs/global.env
    networks:
      default:
      mail-services:
{% if DOCKER_SERVICES.search_engine and DOCKER_SERVICES.search_engine.CONNECT_TYPE == 'external' %}
      search-engine-net:
{% endif %}

{# ###########################################################################
   # DATABASE
   ########################################################################### #}
  db:
    hostname: db.{{ M2_PROJECT }}
    image: {{ DOCKER_SERVICES.database.IMAGE }}
    ports:
      - 3306
    volumes:
      - ./mysql_volumes/{{ DOCKER_SERVICES.database.VOLUME }}:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE={{ M2_DB_NAME }}
      - MYSQL_USER=magento2
      - MYSQL_PASSWORD=magento2
      - TERM=meh
    healthcheck:
{% if DOCKER_SERVICES.database.TYPE == 'mariadb' and version_compare(DOCKER_SERVICES.database.VERSION, '11.0', '>=') %}
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
{% elseif DOCKER_SERVICES.database.TYPE == 'mariadb' %}
      test: 'mysqladmin ping -h localhost -umagento2 -pmagento2'
{% elseif DOCKER_SERVICES.database.TYPE == 'mysql' or DOCKER_SERVICES.database.TYPE == 'percona' %}
      test: 'mysqladmin ping -h localhost -umagento2 -pmagento2'
{% endif %}
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 10s
    networks:
      default:
      databases:

{# ###########################################################################
   # PHP-CLI
   ########################################################################### #}
  cli:
    hostname: cli.{{ M2_PROJECT }}
    build:
      context: containers/php/{{ PHP_VERSION }}-cli/
    depends_on:
      db:
        condition: service_healthy
{% if DOCKER_SERVICES.redis %}
      redis:
        condition: service_started #service_healthy
{% endif %}
{% if DOCKER_SERVICES.rabbitmq %}
      rabbitmq:
        condition: service_started #service_healthy
{% endif %}
{% if DOCKER_SERVICES.search_engine and DOCKER_SERVICES.search_engine.CONNECT_TYPE == 'internal' %}
{% if DOCKER_SERVICES.search_engine.TYPE == 'elasticsearch' %}
      elasticsearch:
        condition: service_started #service_healthy
{% endif %}
{% if DOCKER_SERVICES.search_engine.TYPE == 'opensearch' %}
      opensearch:
        condition: service_started #service_healthy
{% endif %}
{% endif %}
    volumes:
      - ~/.composer/cache:/root/.composer/cache
      - {{ M2_SOURCE_VOLUME }}:/var/www/magento
    env_file:
      - ./envs/global.env
      - ./envs/composer.env
      - ./envs/m2_install.env
    environment:
{# for correct ??? setup according to M2_VERSION #}
      - M2_EDITION={{ M2_EDITION }}
      - M2_VERSION={{ M2_VERSION }}
    networks:
      default:
      mail-services:
{% if DOCKER_SERVICES.search_engine and DOCKER_SERVICES.search_engine.CONNECT_TYPE == 'external' %}
      search-engine-net:
{% endif %}

{# ###########################################################################
   # CRON
   ########################################################################### #}
{% if DOCKER_SERVICES.cron %}
  cron:
    hostname: cron.{{ M2_PROJECT }}
    build:
      context: containers/php/{{ PHP_VERSION }}-cli/
    depends_on:
      db:
        condition: service_healthy
{% if DOCKER_SERVICES.redis %}
      redis:
        condition: service_started #service_healthy
{% endif %}
{% if DOCKER_SERVICES.rabbitmq %}
      rabbitmq:
        condition: service_started #service_healthy
{% endif %}
{% if DOCKER_SERVICES.search_engine and DOCKER_SERVICES.search_engine.CONNECT_TYPE == 'internal' %}
{% if DOCKER_SERVICES.search_engine.TYPE == 'elasticsearch' %}
      elasticsearch:
        condition: service_started #service_healthy
{% endif %}
{% if DOCKER_SERVICES.search_engine.TYPE == 'opensearch' %}
      opensearch:
        condition: service_started #service_healthy
{% endif %}
{% endif %}
    command: run-cron
    volumes:
      - {{ M2_SOURCE_VOLUME }}:/var/www/magento
    env_file:
      - ./envs/global.env
    environment:
{# for correct cron setup according to M2_VERSION #}
      M2SETUP_EDITION: {{ M2_EDITION }}
      M2SETUP_VERSION: {{ M2_VERSION }}
    networks:
      default:
      mail-services:
{% if DOCKER_SERVICES.search_engine and DOCKER_SERVICES.search_engine.CONNECT_TYPE == 'external' %}
      search-engine-net:
{% endif %}
{% endif %}

{# ###########################################################################
   # Magento Coding Standard
   ########################################################################### #}
{% if DOCKER_SERVICES['magento-coding-standard'] %}
  mcs:
    hostname: mcs.{{ M2_PROJECT }}
    build:
      context: containers/php/{{ PHP_VERSION }}-mcs/
    volumes:
      - ~/.composer/cache:/root/.composer/cache
      - ./magento-coding-standard:/var/www/html
    env_file:
      - ./envs/global.env
      - ./envs/composer.env
    networks:
      default:

{% endif %}
{# ###########################################################################
   # Internal Elasticsearch
   ########################################################################### #}
{% if DOCKER_SERVICES.search_engine and DOCKER_SERVICES.search_engine.CONNECT_TYPE == 'internal' %}
{% if DOCKER_SERVICES.search_engine.TYPE == 'elasticsearch' %}
  elasticsearch:
    hostname: elasticsearch.{{ M2_PROJECT }}
    build:
      context: containers/search_engine/elasticsearch/
    logging:
      driver: none
    ports:
      - 9200
    volumes:
      - ./volumes/elasticsearch/data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1012m -Xmx1012m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: [
        "CMD-SHELL",
        "curl -s -u 'admin:admin' -k http://localhost:9200/_cluster/health | grep -E -q '\"status\":\"(green|yellow)\"' || exit 1"
      ]
      interval: 10s
      timeout: 10s
      retries: 12

{% elseif DOCKER_SERVICES.search_engine.TYPE == 'opensearch' %}
  opensearch:
    hostname: opensearch.{{ M2_PROJECT }}
    build:
      context: containers/search_engine/opensearch/
#    logging:
#      driver: none # json-file|none|...
    ports:
      - 9200
    volumes:
      - ./volumes/opensearch2:/usr/share/opensearch/data
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - DISABLE_INSTALL_DEMO_CONFIG=true
      - DISABLE_SECURITY_PLUGIN=true
      - "ES_JAVA_OPTS=-Xms1012m -Xmx1012m -Dlog4j2.formatMsgNoLookups=true"
      - "OPENSEARCH_JAVA_OPTS=-Xms1012m -Xmx1012m -Dlog4j2.formatMsgNoLookups=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: [
        "CMD-SHELL",
        "curl -s -u 'admin:admin' -k http://localhost:9200/_cluster/health | grep -E -q '\"status\":\"(green|yellow)\"' || exit 1"
      ]
      interval: 10s
      timeout: 10s
      retries: 12

{% endif %}
{% endif %}
{# ###########################################################################
   # Redis
   ########################################################################### #}
{% if DOCKER_SERVICES.redis %}
  redis:
    hostname: redis.{{ M2_PROJECT }}
    image: redis:7.2
    ports:
      - 6379
#    healthcheck:
#      test: 'redis-cli ping || exit 1'
#      interval: 30s
#      timeout: 30s
#      retries: 3

{% endif %}
{# ###########################################################################
   # RabbitMQ
   ########################################################################### #}
{% if DOCKER_SERVICES.rabbitmq %}
  rabbitmq:
    hostname: rabbitmq.{{ M2_PROJECT }}
    image: rabbitmq:3.8.9-management
    ports:
      - 4369
      - 5671
      - 5672
      - 15672
      - 25672
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmq_user
      - RABBITMQ_DEFAULT_PASS=rabbitmq_pass
      - RABBITMQ_DEFAULT_VHOST=rabbitmq
#    healthcheck:
#      test: ["CMD", "rabbitmq-diagnostics", "ping"]
#      interval: 10s
#      timeout: 5s
#      retries: 5

{% endif %}
networks:
  nginx-proxy:
    external: true
  databases:
    external: true
{% if DOCKER_SERVICES.search_engine and DOCKER_SERVICES.search_engine.CONNECT_TYPE == 'external' %}
  search-engine-net:
    external: true
{% endif %}
  mail-services:
    external: true
