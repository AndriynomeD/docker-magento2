#!/bin/bash

[ "$DEBUG" = "true" ] && set -x

source /usr/local/bin/version_compare.sh

AUTH_JSON_FILE="$(composer -g config data-dir 2>/dev/null)/auth.json"

if [ -f "$AUTH_JSON_FILE" ]; then
    # Get composer auth information into an environment variable to avoid "you need
    # to be using an interactive terminal to authenticate".
    COMPOSER_AUTH=`cat $AUTH_JSON_FILE`
fi

MAGENTO_COMMAND="magento-command"
MAGENTO_FIX_PERMISSIONS="magento-fix-permissions"
MAGENTO_TYPE="Magento"
if [ "$M2SETUP_EDITION" = "enterprise" ]; then
    MAGENTO_TYPE="Magento Enterprise"
elif [ "$M2SETUP_EDITION" = "cloud" ]; then
    MAGENTO_TYPE="Magento Cloud"
    echo "Not supported edition: $M2SETUP_EDITION"
    exit 1
elif [ "$M2SETUP_EDITION" = "mage-os" ]; then
    MAGENTO_TYPE="MageOS"
else
    echo "Unknown edition: $M2SETUP_EDITION"
    exit 1
fi

if [ ! -f "$MAGENTO_ROOT/composer.json" ]; then
    echo "Creating $MAGENTO_TYPE ($M2SETUP_VERSION) project from composer"

    # install community if version not specify
    COMPOSER_CREATE_PROJECT="composer create-project \
        --repository-url=https://repo.magento.com/ \
        magento/project-community-edition=$M2SETUP_VERSION \
        --no-interaction \
        $MAGENTO_ROOT"
    if [ "$M2SETUP_EDITION" = "enterprise" ]; then
        COMPOSER_CREATE_PROJECT="composer create-project \
            --repository-url=https://repo.magento.com/ \
            magento/project-enterprise-edition=$M2SETUP_VERSION \
            --no-interaction \
            $MAGENTO_ROOT"
    elif [ "$M2SETUP_EDITION" = "cloud" ]; then
            echo "Not supported edition: $M2SETUP_EDITION"
            exit 1
    elif [ "$M2SETUP_EDITION" = "mage-os" ]; then
        COMPOSER_CREATE_PROJECT="composer create-project \
            --repository-url=https://repo.mage-os.org/ \
            mage-os/project-community-edition=$M2SETUP_VERSION \
            --no-interaction \
            $MAGENTO_ROOT"
    else
        echo "Unknown edition: $M2SETUP_EDITION"
        exit 1
    fi
    $COMPOSER_CREATE_PROJECT

    # Magento forces Composer to use $MAGENTO_ROOT/var/composer_home as the home directory
    # when running any Composer commands through Magento, e.g. sampledata:deploy, so copy the
    # credentials over to it to prevent Composer from asking for them again
    if [ -f "$AUTH_JSON_FILE" ]; then
        mkdir -p $MAGENTO_ROOT/var/composer_home
        cat $AUTH_JSON_FILE > $MAGENTO_ROOT/var/composer_home/auth.json
    fi
else
    echo "Magento installation found in $MAGENTO_ROOT, installing composer dependencies"
    composer --working-dir=$MAGENTO_ROOT install
fi

chown -R www-data:www-data $MAGENTO_ROOT && chmod -R g+w $MAGENTO_ROOT

if [ ! "$M2SETUP_INSTALL_DB" = "false" ]; then

    echo "Install $MAGENTO_TYPE"

    INSTALL_COMMAND="$MAGENTO_COMMAND setup:install \
        --db-host=$M2SETUP_DB_HOST \
        --db-name=$M2SETUP_DB_NAME \
        --db-user=$M2SETUP_DB_USER \
        --db-password=$M2SETUP_DB_PASSWORD \
        --base-url=$M2SETUP_BASE_URL \
        --admin-firstname=$M2SETUP_ADMIN_FIRSTNAME \
        --admin-lastname=$M2SETUP_ADMIN_LASTNAME \
        --admin-email=$M2SETUP_ADMIN_EMAIL \
        --admin-user=$M2SETUP_ADMIN_USER \
        --admin-password=$M2SETUP_ADMIN_PASSWORD"

    if [ -n "$M2SETUP_CRYPT_KEY" ]; then
        INSTALL_COMMAND="$INSTALL_COMMAND --key=$M2SETUP_CRYPT_KEY"
    fi

    if { [ "$M2SETUP_EDITION" != "mage-os" ] && version_compare "$M2SETUP_VERSION" ">=" "2.4.1"; } \
        || [ "$M2SETUP_EDITION" = "mage-os" ]; then
        INSTALL_COMMAND="$INSTALL_COMMAND --document-root-is-pub=true"
    fi

    # Use a separate value for secure base URL, if the variable is set
    if [ -n "$M2SETUP_SECURE_BASE_URL" ]; then
        INSTALL_COMMAND="$INSTALL_COMMAND --base-url-secure=$M2SETUP_SECURE_BASE_URL"
    fi

    # Only define a backend-frontname if the variable is set, or not empty.
    if [ -n "$M2SETUP_BACKEND_FRONTNAME" ]; then
        INSTALL_COMMAND="$INSTALL_COMMAND --backend-frontname=$M2SETUP_BACKEND_FRONTNAME"
    fi

    if { [ "$M2SETUP_EDITION" != "mage-os" ] && version_compare "$M2SETUP_VERSION" ">=" "2.4.0"; } \
         || [ "$M2SETUP_EDITION" = "mage-os" ]; then
      INSTALL_COMMAND="$INSTALL_COMMAND $M2_SEARCH_ENGINE_SETTINGS"
    fi

    if { [ "$M2SETUP_EDITION" != "mage-os" ] && version_compare "$M2SETUP_VERSION" ">=" "2.3.0"; } \
         || [ "$M2SETUP_EDITION" = "mage-os" ]; then
      INSTALL_COMMAND="$INSTALL_COMMAND $M2SETUP_AMQ_SETTINGS"
    fi

    if [ -n "$M2SETUP_REDIS_SETTINGS" ]; then
      INSTALL_COMMAND="$INSTALL_COMMAND $M2SETUP_REDIS_SETTINGS"
    fi

    if [ -n "$M2_VARNISH_SETTINGS" ]; then
      INSTALL_COMMAND="$INSTALL_COMMAND $M2_VARNISH_SETTINGS"
    fi

    if [ "$M2SETUP_USE_SAMPLE_DATA" = "true" ]; then

      $MAGENTO_COMMAND sampledata:deploy
      composer --working-dir=$MAGENTO_ROOT update

      INSTALL_COMMAND="$INSTALL_COMMAND --use-sample-data"
    fi

    set +e
    $INSTALL_COMMAND
    set -e
    $MAGENTO_FIX_PERMISSIONS
    $MAGENTO_COMMAND deploy:mode:set developer

    if [ "$M2SETUP_USE_SAMPLE_DATA" = "venia" ]; then
        echo "Deploy Venia Sample Data"

        bash deployVeniaSampleData.sh --path=$MAGENTO_ROOT --yes || exit 1
        #composer --working-dir=$MAGENTO_ROOT config --no-interaction --ansi repositories.venia-sample-data composer https://repo.magento.com
        #composer --working-dir=$MAGENTO_ROOT require --no-interaction --ansi magento/venia-sample-data:0.0.1
        $MAGENTO_FIX_PERMISSIONS
        $MAGENTO_COMMAND setup:upgrade
        if [ -d "$MAGENTO_ROOT/generated" ]; then
            rm -rf $MAGENTO_ROOT/generated/*
        fi
        if [ -d "$MAGENTO_ROOT/var/generation" ]; then
            rm -rf $MAGENTO_ROOT/var/generation/*
        fi
        if [ -d "$MAGENTO_ROOT/var/generated" ]; then
            rm -rf $MAGENTO_ROOT/var/generated/*
        fi
        $MAGENTO_COMMAND setup:di:compile
        $MAGENTO_FIX_PERMISSIONS
    fi

    $MAGENTO_COMMAND index:reindex
    $MAGENTO_COMMAND setup:static-content:deploy -f

else
    echo "Skipping DB installation"
fi

if [ -f "$MAGENTO_ROOT/app/etc/env.php" ]; then
    echo "Creates or modifies the system configuration"

    UPDATE_SYSTEM_CONFIG_COMMAND="$MAGENTO_COMMAND config:set --lock-env"

    $UPDATE_SYSTEM_CONFIG_COMMAND web/unsecure/base_url $M2SETUP_BASE_URL
    if [ -n "$M2SETUP_SECURE_BASE_URL" ]; then
        $UPDATE_SYSTEM_CONFIG_COMMAND web/secure/base_url $M2SETUP_SECURE_BASE_URL
    else
        $UPDATE_SYSTEM_CONFIG_COMMAND web/secure/base_url $M2SETUP_BASE_URL
    fi

    if [ -n "$M2_VARNISH_SETTINGS" ]; then
        $UPDATE_SYSTEM_CONFIG_COMMAND system/full_page_cache/caching_application 2
        $UPDATE_SYSTEM_CONFIG_COMMAND system/full_page_cache/varnish/backend_host web
        $UPDATE_SYSTEM_CONFIG_COMMAND system/full_page_cache/varnish/backend_port 80
        $UPDATE_SYSTEM_CONFIG_COMMAND system/full_page_cache/varnish/access_list web
    fi
else
    echo "Skip Creates or modifies the system configuration"
fi

echo "Fixing file permissions.."

find $MAGENTO_ROOT/pub -type f -exec chmod 664 {} \;
find $MAGENTO_ROOT/pub -type d -exec chmod 775 {} \;
if [ -d "$MAGENTO_ROOT/var/generation" ]; then
    find $MAGENTO_ROOT/var/generation -type d -exec chmod g+s {} \;
fi
if [ -d "$MAGENTO_ROOT/var/generated" ]; then
    find $MAGENTO_ROOT/var/generated -type d -exec chmod g+s {} \;
fi
if [ -d "$MAGENTO_ROOT/generated" ]; then
    find $MAGENTO_ROOT/generated -type d -exec chmod g+s {} \;
fi

$MAGENTO_FIX_PERMISSIONS

echo "Installation complete"
